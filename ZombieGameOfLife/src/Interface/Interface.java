/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import ZombieGameOfLife.FileIO;
import ZombieGameOfLife.ZombieGameOfLife;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Classe autoexplicativa, responsável por chamar os métodos e classes
 * que são encarregados da criação de gerações e gerenciamento de threads, assim
 * como a interação interface-usuário.
 * 
 * @author gustavopinho
 */
public class Interface extends javax.swing.JFrame 
{   
    private String roadFile, fileName;
    private int flag, size, iteration, numberThreads;
    private boolean thread;

    /**
     * Método Construtor.
     */
    public Interface() 
    {       
        initComponents();
        this.setSize(490, 420);
        this.setLocationRelativeTo(null);
        this.flag = 1;               
        this.size = 0;
        this.iteration = 0;
        this.fileName = "saída.txt";
        this.thread = false;
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Zombie Game of Life");
        setResizable(false);
        getContentPane().setLayout(null);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 230, 270, 160);

        jButton1.setText("Play");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(360, 250, 110, 50);

        jLabel3.setFont(new java.awt.Font("Cantarell", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(254, 254, 254));
        jLabel3.setText("Log:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 190, 70, 33);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Título.png"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(90, 20, 390, 50);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/fundo.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 490, 400);

        jMenu1.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem1MousePressed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenu2.setText("Edit");

        jMenuItem2.setText("Number of Threads");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem2MousePressed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Output File Name");
        jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem3MousePressed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Reset Threads");
        jMenuItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem4MousePressed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenu1.add(jMenu2);

        jMenuItem5.setText("Exit");
        jMenuItem5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem5MousePressed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("About");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu3MousePressed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Método responsável por selecionar o arquivo de configuração.
     * 
     * @param evt java.awt.event.MouseEvent - Corresponde ao clique do mouse.
     */
    private void jMenuItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MousePressed
        
        JFileChooser window = new JFileChooser();
        this.flag = window.showOpenDialog(null);
        
        this.roadFile = "";
        if (flag == JFileChooser.APPROVE_OPTION)
            this.roadFile = window.getSelectedFile().getAbsolutePath();            
    }//GEN-LAST:event_jMenuItem1MousePressed
    
    /**
     * Método relacioando ao jButton1, responsável por obter os parâmetros de 
     * entrada e, para determinado número de iterações, chamar os métodos para 
     * calcular as gerações e escrita no arquivo.
     * 
     * @param evt java.awt.event.ActionEvent - Corresponde ao duplo clique do
     * mouse ou ao enter, quando o botão estiver selecionado.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        boolean error = true;
        
        if (flag == 1)
            JOptionPane.showMessageDialog(null, "Selecione um arquivo de entrada!", "Error", JOptionPane.ERROR_MESSAGE);
        else
        {   while (error)
                try
                {   this.size = Integer.parseInt(JOptionPane.showInputDialog(null, "Digite o tamanho do grid:", "Input", JOptionPane.PLAIN_MESSAGE));
                    error = false;
                }
                catch (NumberFormatException ex)
                {   JOptionPane.showMessageDialog(null, "Digite um número inteiro!", "Error", JOptionPane.ERROR_MESSAGE);                
                }
            error = true;
            while (error)
                try
                {   this.iteration = Integer.parseInt(JOptionPane.showInputDialog(null, "Digite o número de iterações:", "Input", JOptionPane.PLAIN_MESSAGE));
                    error = false;
                }
                catch (NumberFormatException ex)
                {   JOptionPane.showMessageDialog(null, "Digite um número inteiro!", "Error", JOptionPane.ERROR_MESSAGE);                
                }
            
            clearText();
            ZombieGameOfLife game;
            Runtime rt = Runtime.getRuntime();
            FileIO output = new FileIO(fileName);
            FileIO statistics = new FileIO("statistics.txt");
            long tempInitial;
            
            if (!thread)    
                game = new ZombieGameOfLife(this.size, this.iteration);
            else
                game = new ZombieGameOfLife(this.size, this.iteration, this.numberThreads);
                       
            game.buildGrid(this.roadFile);
            setText ("Entrada:\n");
            game.getGridInput().printGrid();
            for (int i=0; i<this.iteration; i++)
            {   tempInitial = System.nanoTime();
                game.createNewGeneration();
                try 
                {  statistics.writeStatistics(rt.totalMemory()-rt.freeMemory(),System.nanoTime() - tempInitial , i+1);
                } 
                catch (IOException e) 
                {   JOptionPane.showMessageDialog(null, "Não foi possível escrever no aquivo de estatísticas!", "Error", JOptionPane.ERROR_MESSAGE);
                    System.exit(1);                
                }
                setText("Geração "+(i+1)+":\n");
                game.getGridOutput().printGrid();
                try 
                {   output.writeFile(game.getGridOutput(), this.size);
                } 
                catch (IOException e) 
                {   JOptionPane.showMessageDialog(null, "Não foi possível escrever no aquivo!", "Error", JOptionPane.ERROR_MESSAGE);
                    System.exit(1);                
                }
                // Copia o gridOutput para o gridInput para a criação da nova geração
                for (int t=0; t<this.size; t++)
                    for (int j=0; j<this.size; j++)
                        game.setGridInput(t, j, game.getGridOutput().getGrid(t, j));
            }
            try
            {   output.closeWriteFile();
                statistics.closeWriteFile();
            }
            catch (IOException e)
            {   JOptionPane.showMessageDialog(null, "Não foi possível encerrar o aquivo!", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(1);                    
            }
       }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * Método relacionado ao menu Edit, item Number of Threads, que tem como
     * função ler do usuário o número de threads a ser setado.
     * 
     * @param evt java.awt.event.MouseEvent - Corresponde ao clique do mouse.
     */
    private void jMenuItem2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MousePressed
       
        boolean error = true;
        
        while (error)
            try
            {   this.numberThreads = Integer.parseInt(JOptionPane.showInputDialog(null, "Digite o número de threads desejado:", "Input", JOptionPane.PLAIN_MESSAGE));
                error = false;
                this.thread = true;
            }    
            catch (NumberFormatException e)
            {   JOptionPane.showMessageDialog(null, "Digite um número inteiro!", "Error", JOptionPane.ERROR_MESSAGE); 
            }
    }//GEN-LAST:event_jMenuItem2MousePressed
    
    /**
     * Método relacionado ao menu Edit, item Output File Name, que tem como
     * função ler do usuário o nome do arquivo de saída desejado.
     * 
     * @param evt java.awt.event.MouseEvent - Corresponde ao clique do mouse.
     */
    private void jMenuItem3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem3MousePressed
        
        boolean error = true;
        
        while (error)
            try
            {   this.fileName = JOptionPane.showInputDialog(null, "Digite o nome do arquivo de saída:", "Input", JOptionPane.PLAIN_MESSAGE);
                error = false;
            }
            catch (NumberFormatException e)
            {   JOptionPane.showMessageDialog(null, "Digite um nome válido!", "Error", JOptionPane.ERROR_MESSAGE);         
            }
    }//GEN-LAST:event_jMenuItem3MousePressed
    
    /**
     * Método relacionado ao menu Edit, item Reset Threads, que tem como
     * função utilizar o número de threads igual ao número de núcleos do
     * processador.
     * 
     * @param evt java.awt.event.MouseEvent - Corresponde ao clique do mouse.
     */
    private void jMenuItem4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem4MousePressed
        
        this.thread = false;
    }//GEN-LAST:event_jMenuItem4MousePressed
    
    /**
     * Método relacionado ao menu Edit, item Exit, que tem como função encerrar
     * o programa.
     * 
     * @param evt java.awt.event.MouseEvent - Corresponde ao clique do mouse.
     */
    private void jMenuItem5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem5MousePressed
        
        System.exit(0);
    }//GEN-LAST:event_jMenuItem5MousePressed

    private void jMenu3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MousePressed
        
        JOptionPane.showMessageDialog(null, "Componentes:\n\n-Gustavo Pinho.\n-Felipe Prestes.", "Trabalho de SO", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jMenu3MousePressed
    
    /**
     * Método responsável por escrever no jTextArea1.
     * 
     * @param text String - Corresponde ao texto que deve ser escrito no
     * componente.
     */
    public static void setText(String text)
    {
        jTextArea1.append(text);
    }
    
    /**
     * Método responsável por limpar o jTextArea1.
     */
    public static void clearText()
    {
        jTextArea1.setText("");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
